"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./types/generated-queries.ts":
/*!************************************!*\
  !*** ./types/generated-queries.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KeystoneAdminUiFieldMetaCreateViewFieldMode\": function() { return /* binding */ KeystoneAdminUiFieldMetaCreateViewFieldMode; },\n/* harmony export */   \"KeystoneAdminUiFieldMetaItemViewFieldMode\": function() { return /* binding */ KeystoneAdminUiFieldMetaItemViewFieldMode; },\n/* harmony export */   \"KeystoneAdminUiFieldMetaListViewFieldMode\": function() { return /* binding */ KeystoneAdminUiFieldMetaListViewFieldMode; },\n/* harmony export */   \"KeystoneAdminUiSortDirection\": function() { return /* binding */ KeystoneAdminUiSortDirection; },\n/* harmony export */   \"PasswordAuthErrorCode\": function() { return /* binding */ PasswordAuthErrorCode; },\n/* harmony export */   \"PasswordResetRedemptionErrorCode\": function() { return /* binding */ PasswordResetRedemptionErrorCode; },\n/* harmony export */   \"PasswordResetRequestErrorCode\": function() { return /* binding */ PasswordResetRequestErrorCode; },\n/* harmony export */   \"SortDestinationImagesBy\": function() { return /* binding */ SortDestinationImagesBy; },\n/* harmony export */   \"SortDestinationsBy\": function() { return /* binding */ SortDestinationsBy; },\n/* harmony export */   \"SortGuidesBy\": function() { return /* binding */ SortGuidesBy; },\n/* harmony export */   \"SortUsersBy\": function() { return /* binding */ SortUsersBy; },\n/* harmony export */   \"AllGuidesQueryDocument\": function() { return /* binding */ AllGuidesQueryDocument; },\n/* harmony export */   \"useAllGuidesQueryQuery\": function() { return /* binding */ useAllGuidesQueryQuery; },\n/* harmony export */   \"useAllGuidesQueryLazyQuery\": function() { return /* binding */ useAllGuidesQueryLazyQuery; },\n/* harmony export */   \"refetchAllGuidesQueryQuery\": function() { return /* binding */ refetchAllGuidesQueryQuery; },\n/* harmony export */   \"CreateGuideDocument\": function() { return /* binding */ CreateGuideDocument; },\n/* harmony export */   \"useCreateGuideMutation\": function() { return /* binding */ useCreateGuideMutation; },\n/* harmony export */   \"GetGuideDocument\": function() { return /* binding */ GetGuideDocument; },\n/* harmony export */   \"useGetGuideQuery\": function() { return /* binding */ useGetGuideQuery; },\n/* harmony export */   \"useGetGuideLazyQuery\": function() { return /* binding */ useGetGuideLazyQuery; },\n/* harmony export */   \"refetchGetGuideQuery\": function() { return /* binding */ refetchGetGuideQuery; },\n/* harmony export */   \"UserDocument\": function() { return /* binding */ UserDocument; },\n/* harmony export */   \"useUserQuery\": function() { return /* binding */ useUserQuery; },\n/* harmony export */   \"useUserLazyQuery\": function() { return /* binding */ useUserLazyQuery; },\n/* harmony export */   \"refetchUserQuery\": function() { return /* binding */ refetchUserQuery; },\n/* harmony export */   \"RequestResetDocument\": function() { return /* binding */ RequestResetDocument; },\n/* harmony export */   \"useRequestResetMutation\": function() { return /* binding */ useRequestResetMutation; },\n/* harmony export */   \"ResetPasswordDocument\": function() { return /* binding */ ResetPasswordDocument; },\n/* harmony export */   \"useResetPasswordMutation\": function() { return /* binding */ useResetPasswordMutation; },\n/* harmony export */   \"SignInDocument\": function() { return /* binding */ SignInDocument; },\n/* harmony export */   \"useSignInMutation\": function() { return /* binding */ useSignInMutation; },\n/* harmony export */   \"SignOutDocument\": function() { return /* binding */ SignOutDocument; },\n/* harmony export */   \"useSignOutMutation\": function() { return /* binding */ useSignOutMutation; },\n/* harmony export */   \"SignUpDocument\": function() { return /* binding */ SignUpDocument; },\n/* harmony export */   \"useSignUpMutation\": function() { return /* binding */ useSignUpMutation; }\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"./node_modules/@apollo/client/index.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\nfunction _templateObject() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  query allGuidesQuery {\\n    allGuides {\\n      id\\n      name\\n      location_info\\n      status\\n      destinations {\\n        id\\n        name\\n        hover_description\\n        photo {\\n          id\\n          image {\\n            publicUrlTransformed\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  mutation createGuide(\\n    $name: String!\\n    $location_info: String\\n    $altText: String\\n    $image: Upload\\n  ) {\\n    createGuide(\\n      data: {\\n        name: $name\\n        location_info: $location_info\\n        altText: $altText\\n        image: $image\\n      }\\n    ) {\\n      id\\n      name\\n    }\\n  }\\n\"\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  query getGuide($id: ID!) {\\n    Guide(where: { id: $id }) {\\n      id\\n      name\\n      location_info\\n      status\\n      image {\\n        publicUrlTransformed\\n      }\\n      altText\\n      destinations {\\n        id\\n        name\\n        hover_description\\n        photo {\\n          id\\n          image {\\n            publicUrlTransformed\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"\n    ]);\n    _templateObject2 = function _templateObject2() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  query User {\\n    authenticatedItem {\\n      ... on User {\\n        id\\n        name\\n        email\\n      }\\n    }\\n  }\\n\"\n    ]);\n    _templateObject3 = function _templateObject3() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject4() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  mutation requestReset($email: String!) {\\n    sendUserPasswordResetLink(email: $email) {\\n      code\\n      message\\n    }\\n  }\\n\"\n    ]);\n    _templateObject4 = function _templateObject4() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject5() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  mutation resetPassword($email: String!, $token: String!, $password: String!) {\\n    redeemUserPasswordResetToken(\\n      email: $email\\n      token: $token\\n      password: $password\\n    ) {\\n      code\\n      message\\n    }\\n  }\\n\"\n    ]);\n    _templateObject5 = function _templateObject5() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject6() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  mutation signIn($email: String!, $password: String!) {\\n    authenticateUserWithPassword(email: $email, password: $password) {\\n      ... on UserAuthenticationWithPasswordSuccess {\\n        item {\\n          id\\n          email\\n          name\\n        }\\n      }\\n      ... on UserAuthenticationWithPasswordFailure {\\n        message\\n        code\\n      }\\n    }\\n  }\\n\"\n    ]);\n    _templateObject6 = function _templateObject6() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject7() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  mutation signOut {\\n    endSession\\n  }\\n\"\n    ]);\n    _templateObject7 = function _templateObject7() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject8() {\n    var data = _taggedTemplateLiteral([\n        \"\\n  mutation signUp($name: String!, $email: String!, $password: String!) {\\n    createUser(data: { name: $name, email: $email, password: $password }) {\\n      id\\n      name\\n      email\\n    }\\n  }\\n\"\n    ]);\n    _templateObject8 = function _templateObject8() {\n        return data;\n    };\n    return data;\n}\n\n\nvar defaultOptions = {};\nvar KeystoneAdminUiFieldMetaCreateViewFieldMode;\n(function(KeystoneAdminUiFieldMetaCreateViewFieldMode) {\n    KeystoneAdminUiFieldMetaCreateViewFieldMode[\"Edit\"] = \"edit\";\n    KeystoneAdminUiFieldMetaCreateViewFieldMode[\"Hidden\"] = \"hidden\";\n})(KeystoneAdminUiFieldMetaCreateViewFieldMode || (KeystoneAdminUiFieldMetaCreateViewFieldMode = {}));\nvar KeystoneAdminUiFieldMetaItemViewFieldMode;\n(function(KeystoneAdminUiFieldMetaItemViewFieldMode) {\n    KeystoneAdminUiFieldMetaItemViewFieldMode[\"Edit\"] = \"edit\";\n    KeystoneAdminUiFieldMetaItemViewFieldMode[\"Hidden\"] = \"hidden\";\n    KeystoneAdminUiFieldMetaItemViewFieldMode[\"Read\"] = \"read\";\n})(KeystoneAdminUiFieldMetaItemViewFieldMode || (KeystoneAdminUiFieldMetaItemViewFieldMode = {}));\nvar KeystoneAdminUiFieldMetaListViewFieldMode;\n(function(KeystoneAdminUiFieldMetaListViewFieldMode) {\n    KeystoneAdminUiFieldMetaListViewFieldMode[\"Hidden\"] = \"hidden\";\n    KeystoneAdminUiFieldMetaListViewFieldMode[\"Read\"] = \"read\";\n})(KeystoneAdminUiFieldMetaListViewFieldMode || (KeystoneAdminUiFieldMetaListViewFieldMode = {}));\nvar KeystoneAdminUiSortDirection;\n(function(KeystoneAdminUiSortDirection) {\n    KeystoneAdminUiSortDirection[\"Asc\"] = \"ASC\";\n    KeystoneAdminUiSortDirection[\"Desc\"] = \"DESC\";\n})(KeystoneAdminUiSortDirection || (KeystoneAdminUiSortDirection = {}));\nvar PasswordAuthErrorCode;\n(function(PasswordAuthErrorCode) {\n    PasswordAuthErrorCode[\"Failure\"] = \"FAILURE\";\n    PasswordAuthErrorCode[\"IdentityNotFound\"] = \"IDENTITY_NOT_FOUND\";\n    PasswordAuthErrorCode[\"MultipleIdentityMatches\"] = \"MULTIPLE_IDENTITY_MATCHES\";\n    PasswordAuthErrorCode[\"SecretMismatch\"] = \"SECRET_MISMATCH\";\n    PasswordAuthErrorCode[\"SecretNotSet\"] = \"SECRET_NOT_SET\";\n})(PasswordAuthErrorCode || (PasswordAuthErrorCode = {}));\nvar PasswordResetRedemptionErrorCode;\n(function(PasswordResetRedemptionErrorCode) {\n    PasswordResetRedemptionErrorCode[\"Failure\"] = \"FAILURE\";\n    PasswordResetRedemptionErrorCode[\"IdentityNotFound\"] = \"IDENTITY_NOT_FOUND\";\n    PasswordResetRedemptionErrorCode[\"MultipleIdentityMatches\"] = \"MULTIPLE_IDENTITY_MATCHES\";\n    PasswordResetRedemptionErrorCode[\"TokenExpired\"] = \"TOKEN_EXPIRED\";\n    PasswordResetRedemptionErrorCode[\"TokenMismatch\"] = \"TOKEN_MISMATCH\";\n    PasswordResetRedemptionErrorCode[\"TokenNotSet\"] = \"TOKEN_NOT_SET\";\n    PasswordResetRedemptionErrorCode[\"TokenRedeemed\"] = \"TOKEN_REDEEMED\";\n})(PasswordResetRedemptionErrorCode || (PasswordResetRedemptionErrorCode = {}));\nvar PasswordResetRequestErrorCode;\n(function(PasswordResetRequestErrorCode) {\n    PasswordResetRequestErrorCode[\"IdentityNotFound\"] = \"IDENTITY_NOT_FOUND\";\n    PasswordResetRequestErrorCode[\"MultipleIdentityMatches\"] = \"MULTIPLE_IDENTITY_MATCHES\";\n})(PasswordResetRequestErrorCode || (PasswordResetRequestErrorCode = {}));\nvar SortDestinationImagesBy;\n(function(SortDestinationImagesBy) {\n    SortDestinationImagesBy[\"AltTextAsc\"] = \"altText_ASC\";\n    SortDestinationImagesBy[\"AltTextDesc\"] = \"altText_DESC\";\n    SortDestinationImagesBy[\"DestinationAsc\"] = \"destination_ASC\";\n    SortDestinationImagesBy[\"DestinationDesc\"] = \"destination_DESC\";\n    SortDestinationImagesBy[\"IdAsc\"] = \"id_ASC\";\n    SortDestinationImagesBy[\"IdDesc\"] = \"id_DESC\";\n})(SortDestinationImagesBy || (SortDestinationImagesBy = {}));\nvar SortDestinationsBy;\n(function(SortDestinationsBy) {\n    SortDestinationsBy[\"AddressAsc\"] = \"address_ASC\";\n    SortDestinationsBy[\"AddressDesc\"] = \"address_DESC\";\n    SortDestinationsBy[\"DescriptionAsc\"] = \"description_ASC\";\n    SortDestinationsBy[\"DescriptionDesc\"] = \"description_DESC\";\n    SortDestinationsBy[\"GuideAsc\"] = \"guide_ASC\";\n    SortDestinationsBy[\"GuideDesc\"] = \"guide_DESC\";\n    SortDestinationsBy[\"HoverDescriptionAsc\"] = \"hover_description_ASC\";\n    SortDestinationsBy[\"HoverDescriptionDesc\"] = \"hover_description_DESC\";\n    SortDestinationsBy[\"IdAsc\"] = \"id_ASC\";\n    SortDestinationsBy[\"IdDesc\"] = \"id_DESC\";\n    SortDestinationsBy[\"NameAsc\"] = \"name_ASC\";\n    SortDestinationsBy[\"NameDesc\"] = \"name_DESC\";\n    SortDestinationsBy[\"PhotoAsc\"] = \"photo_ASC\";\n    SortDestinationsBy[\"PhotoDesc\"] = \"photo_DESC\";\n    SortDestinationsBy[\"WebsiteAsc\"] = \"website_ASC\";\n    SortDestinationsBy[\"WebsiteDesc\"] = \"website_DESC\";\n})(SortDestinationsBy || (SortDestinationsBy = {}));\nvar SortGuidesBy;\n(function(SortGuidesBy) {\n    SortGuidesBy[\"AltTextAsc\"] = \"altText_ASC\";\n    SortGuidesBy[\"AltTextDesc\"] = \"altText_DESC\";\n    SortGuidesBy[\"DestinationsAsc\"] = \"destinations_ASC\";\n    SortGuidesBy[\"DestinationsDesc\"] = \"destinations_DESC\";\n    SortGuidesBy[\"IdAsc\"] = \"id_ASC\";\n    SortGuidesBy[\"IdDesc\"] = \"id_DESC\";\n    SortGuidesBy[\"LocationInfoAsc\"] = \"location_info_ASC\";\n    SortGuidesBy[\"LocationInfoDesc\"] = \"location_info_DESC\";\n    SortGuidesBy[\"NameAsc\"] = \"name_ASC\";\n    SortGuidesBy[\"NameDesc\"] = \"name_DESC\";\n    SortGuidesBy[\"StatusAsc\"] = \"status_ASC\";\n    SortGuidesBy[\"StatusDesc\"] = \"status_DESC\";\n})(SortGuidesBy || (SortGuidesBy = {}));\nvar SortUsersBy;\n(function(SortUsersBy) {\n    SortUsersBy[\"EmailAsc\"] = \"email_ASC\";\n    SortUsersBy[\"EmailDesc\"] = \"email_DESC\";\n    SortUsersBy[\"IdAsc\"] = \"id_ASC\";\n    SortUsersBy[\"IdDesc\"] = \"id_DESC\";\n    SortUsersBy[\"MagicAuthIssuedAtAsc\"] = \"magicAuthIssuedAt_ASC\";\n    SortUsersBy[\"MagicAuthIssuedAtDesc\"] = \"magicAuthIssuedAt_DESC\";\n    SortUsersBy[\"MagicAuthRedeemedAtAsc\"] = \"magicAuthRedeemedAt_ASC\";\n    SortUsersBy[\"MagicAuthRedeemedAtDesc\"] = \"magicAuthRedeemedAt_DESC\";\n    SortUsersBy[\"NameAsc\"] = \"name_ASC\";\n    SortUsersBy[\"NameDesc\"] = \"name_DESC\";\n    SortUsersBy[\"PasswordResetIssuedAtAsc\"] = \"passwordResetIssuedAt_ASC\";\n    SortUsersBy[\"PasswordResetIssuedAtDesc\"] = \"passwordResetIssuedAt_DESC\";\n    SortUsersBy[\"PasswordResetRedeemedAtAsc\"] = \"passwordResetRedeemedAt_ASC\";\n    SortUsersBy[\"PasswordResetRedeemedAtDesc\"] = \"passwordResetRedeemedAt_DESC\";\n})(SortUsersBy || (SortUsersBy = {}));\nvar AllGuidesQueryDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject());\n/**\n * __useAllGuidesQueryQuery__\n *\n * To run a query within a React component, call `useAllGuidesQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllGuidesQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllGuidesQueryQuery({\n *   variables: {\n *   },\n * });\n */ function useAllGuidesQueryQuery(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(AllGuidesQueryDocument, options);\n}\nfunction useAllGuidesQueryLazyQuery(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(AllGuidesQueryDocument, options);\n}\nfunction refetchAllGuidesQueryQuery(variables) {\n    return {\n        query: AllGuidesQueryDocument,\n        variables: variables\n    };\n}\nvar CreateGuideDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject1());\n/**\n * __useCreateGuideMutation__\n *\n * To run a mutation, you first call `useCreateGuideMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateGuideMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createGuideMutation, { data, loading, error }] = useCreateGuideMutation({\n *   variables: {\n *      name: // value for 'name'\n *      location_info: // value for 'location_info'\n *      altText: // value for 'altText'\n *      image: // value for 'image'\n *   },\n * });\n */ function useCreateGuideMutation(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(CreateGuideDocument, options);\n}\nvar GetGuideDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject2());\n/**\n * __useGetGuideQuery__\n *\n * To run a query within a React component, call `useGetGuideQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetGuideQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetGuideQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */ function useGetGuideQuery(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(GetGuideDocument, options);\n}\nfunction useGetGuideLazyQuery(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(GetGuideDocument, options);\n}\nfunction refetchGetGuideQuery(variables) {\n    return {\n        query: GetGuideDocument,\n        variables: variables\n    };\n}\nvar UserDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject3());\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *   },\n * });\n */ function useUserQuery(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(UserDocument, options);\n}\nfunction useUserLazyQuery(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(UserDocument, options);\n}\nfunction refetchUserQuery(variables) {\n    return {\n        query: UserDocument,\n        variables: variables\n    };\n}\nvar RequestResetDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject4());\n/**\n * __useRequestResetMutation__\n *\n * To run a mutation, you first call `useRequestResetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRequestResetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [requestResetMutation, { data, loading, error }] = useRequestResetMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */ function useRequestResetMutation(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(RequestResetDocument, options);\n}\nvar ResetPasswordDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject5());\n/**\n * __useResetPasswordMutation__\n *\n * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useResetPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *      token: // value for 'token'\n *      password: // value for 'password'\n *   },\n * });\n */ function useResetPasswordMutation(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(ResetPasswordDocument, options);\n}\nvar SignInDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject6());\n/**\n * __useSignInMutation__\n *\n * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignInMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signInMutation, { data, loading, error }] = useSignInMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */ function useSignInMutation(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(SignInDocument, options);\n}\nvar SignOutDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject7());\n/**\n * __useSignOutMutation__\n *\n * To run a mutation, you first call `useSignOutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignOutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signOutMutation, { data, loading, error }] = useSignOutMutation({\n *   variables: {\n *   },\n * });\n */ function useSignOutMutation(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(SignOutDocument, options);\n}\nvar SignUpDocument = (0,_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql)(_templateObject8());\n/**\n * __useSignUpMutation__\n *\n * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signUpMutation, { data, loading, error }] = useSignUpMutation({\n *   variables: {\n *      name: // value for 'name'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */ function useSignUpMutation(baseOptions) {\n    var options = _objectSpread({}, defaultOptions, baseOptions);\n    return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useMutation(SignUpDocument, options);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./types/generated-queries.ts\n");

/***/ })

});